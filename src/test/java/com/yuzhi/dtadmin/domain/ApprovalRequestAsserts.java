package com.yuzhi.dtadmin.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ApprovalRequestAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertApprovalRequestAllPropertiesEquals(ApprovalRequest expected, ApprovalRequest actual) {
        assertApprovalRequestAutoGeneratedPropertiesEquals(expected, actual);
        assertApprovalRequestAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertApprovalRequestAllUpdatablePropertiesEquals(ApprovalRequest expected, ApprovalRequest actual) {
        assertApprovalRequestUpdatableFieldsEquals(expected, actual);
        assertApprovalRequestUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertApprovalRequestAutoGeneratedPropertiesEquals(ApprovalRequest expected, ApprovalRequest actual) {
        assertThat(actual)
            .as("Verify ApprovalRequest auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertApprovalRequestUpdatableFieldsEquals(ApprovalRequest expected, ApprovalRequest actual) {
        assertThat(actual)
            .as("Verify ApprovalRequest relevant properties")
            .satisfies(a -> assertThat(a.getRequester()).as("check requester").isEqualTo(expected.getRequester()))
            .satisfies(a -> assertThat(a.getType()).as("check type").isEqualTo(expected.getType()))
            .satisfies(a -> assertThat(a.getReason()).as("check reason").isEqualTo(expected.getReason()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getDecidedAt()).as("check decidedAt").isEqualTo(expected.getDecidedAt()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getApprover()).as("check approver").isEqualTo(expected.getApprover()))
            .satisfies(a -> assertThat(a.getDecisionNote()).as("check decisionNote").isEqualTo(expected.getDecisionNote()))
            .satisfies(a -> assertThat(a.getErrorMessage()).as("check errorMessage").isEqualTo(expected.getErrorMessage()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertApprovalRequestUpdatableRelationshipsEquals(ApprovalRequest expected, ApprovalRequest actual) {
        // empty method
    }
}
